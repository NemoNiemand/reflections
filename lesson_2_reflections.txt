What happens when you initialize a repository?  What do you need to do to it?
    Initializing the repository creates a .git file to allow git to recognize the folder as a repository
    You still need to add files to track and then execute your first commit
    
How is the staging area different from the working directory and the repository? What value do you think it offers?
    Using a staging area allows you to create logical clusters of files to group for commit vs. batch commits or one-off transfers

How can you use a staging area to make sure that you have one commit per logical change?
    As changes are made, you can move the files into the staging area
    Use of the staging area allows you to compare staged files to the working director and recent commits
    This in turn helps manage interrelated changes between multiple files and versions
    
What are some situations when branches would be helpful in keeping your history organized?  How would branches help?
	 Branches are useful when development objectives fork (e.g. different language versions, exploring problems)
	
How do the diagrams help you visualize the branch structure?
    Help track where/why you've branched, which is useful later in merging branches
    
What is the result of merging two branches together?  Why do we represent it in the digram the way we do?
    Merging two branches collapses all changes since the original parent into a single branch
    We represent it in the diagram the way we do to show that they were parallel paths that came together
    
What are the pros and cons of Git's automatic merging vs always doing it manually?
    Pro: logic accelerates time it takes to incorporate non-overlapping changes
    Con: still need to manually go back and fix/determine which overlapping changes take priority